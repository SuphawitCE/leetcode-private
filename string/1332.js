/*
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

*/
const isPalidrome = (s) => {
    // Example of string palindrome
    let isPalin = false;
    
    for(let i = 0;i < s.length / 2;i++) {
        // abba is palindrome
        // 'a' !== 'a'
        if(s[i] !== s[s.length - 1 - i]) {
            return false;
            isPalin = false;
            break;
        }
    }
    return true;
}


const solve = (s) => {
    if(s.length === 0)  return 0;
    // let L = 0;
    // let R = s.length - 1;
    console.log('length', s.length - 1, ':', s[s.length]);
    for(let L = 0, R = s.length - 1;L < R;L++, R--) {
        console.log(s[L] !== s[R]);
        if(s[L] !== s[R])    return 2;
    }

    // while(L < R) {
    //     if(s[L++] === s[R--]) {
    //         // ++L;
    //         // --R;
    //     } else {
    //         return 2;
    //     }
    // }
    // console.log(s[L], '!', s[R]);
    return 1;

}

console.log('case 1#: ', solve('abba'));
console.log('case 2#: ', solve('abb'));
console.log('case 3#: ', solve('abcd'));
